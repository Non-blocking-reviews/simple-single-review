name: Auto close review issues

on:
  workflow_run:
    workflows:
      - "Handle commit comments"
      - "Update-review-issues"
    types:
      - completed
  issues:
    types:
      - edited
concurrency:
  group: close-parent-review-issues
  cancel-in-progress: true
  
jobs:
  close-if-no-unchecked:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.TRUNKTOPUS_APP_ID }}
          private-key: ${{ secrets.TRUNKTOPUS_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - name: Find author-issues
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          #TODO: Throttle, so it does not run all the time... E.g. every 5 minutes? 
          echo "üîç Fetching author-issues..."
          REPO=${{ github.repository }}

          # Get all open issues with the label 'author-issue'
          gh issue list --repo "$REPO" --state open --label "author-issue" --limit 500 --json number | jq -r '.[].number' > parent_issues.txt
          cat parent_issues.txt

          while read -r issue; do
            ISSUE_NUM=$(echo "$issue")

            echo "üìù Checking issue #$ISSUE_NUM"

            BODY=$(gh issue view "$ISSUE_NUM" --repo "$REPO" --json body -q '.body')

            echo "Body is: $BODY"
            # Count unchecked and checked boxes
            CHECKED_PEER_REVIEWS=$(echo "$BODY" | grep -i '\[x\].*Sub-task for ' | grep -c . || true)
            UNCHECKED_COMMENTS=$(echo "$BODY" | grep -i '\[ \].*Comment by' | grep -c . || true)
            CHECKED_COMMENTS=$(echo "$BODY" | grep -i '\[x\].*Comment by' | grep -c . || true)

            TOTAL_CHECKLIST_REFERENCES=$((CHECKED_COMMENTS + UNCHECKED_COMMENTS))

            #TODO: Investigate whether there are some unobserved comments for this specific commit.
            COMMIT_SHA=$(echo "$BODY" | grep -oE 'github\.com/.*/commit/[a-f0-9]+' | grep -oE '[a-f0-9]{40}' | head -n1)
            COMMENT_COUNT=$(gh api repos/$REPO/commits/$COMMIT_SHA/comments | jq 'length')
            if [ "$COMMENT_COUNT" -gt 0 ]; then
              echo "‚úÖ Commit $COMMIT_SHA has comments"
            else
              echo "‚ùå No comments on commit $COMMIT_SHA"
            fi

            if [ "$TOTAL_CHECKLIST_REFERENCES" -lt "$COMMENT_COUNT" ]; then
              echo "‚ö†Ô∏è Not all commit comments are tracked in checklist"
              UNCHECKED_COMMENTS=$((COMMENT_COUNT - TOTAL_CHECKLIST_REFERENCES))
            else
              echo "‚úÖ All commit comments are accounted for"
            fi
            #TODO: We could just add the comments here...

            echo "‚úÖ $CHECKED_PEER_REVIEWS peer reviews checked, ‚ùå $UNCHECKED_COMMENTS unchecked comments"

            if [ "$UNCHECKED_COMMENTS" -eq 0 ] && [ "$CHECKED_PEER_REVIEWS" -gt 0 ]; then
              echo "üéØ A peer review is closed and no open comments ‚Äî closing issue #$ISSUE_NUM"
              gh issue close "$ISSUE_NUM" --repo "$REPO" --comment "‚úÖ No open comments and peer review closed"
            else
              echo "‚è≥ Still waiting for some tasks ‚Äî skipping #$ISSUE_NUM"
            fi
          done < parent_issues.txt

          sleep 4
          echo "Closing peer reviews"
          > peer_reviews_to_close.txt

          gh issue list --repo "$REPO" --state open --label "author-issue" --json number | jq -r '.[].number' > all_open_parent_issues.txt
          mapfile -t OPEN_PARENT_IDS < all_open_parent_issues.txt

          # Function to check if an ID exists in the open parent list
          is_valid_parent_id() {
            local id="$1"
            for valid_id in "${OPEN_PARENT_IDS[@]}"; do
              [[ "$id" == "$valid_id" ]] && return 0
            done
            return 1
          }

          # Process all open issues with body
          gh issue list --repo "$REPO" --state open --label "code-review" --json number,body \
            | jq -r '
                .[] | select(.body | test("Linked to main issue: #[0-9]+")) |
                {number, body} |
                .number as $n |
                (.body | capture("Linked to main issue: #(?<id>[0-9]+)") | "\($n) \(.id)")
              ' \
            | while read -r issue_id ref_id; do
                if ! is_valid_parent_id "$ref_id"; then
                  echo "$issue_id" >> peer_reviews_to_close.txt
                fi
              done
          if [[ -s peer_reviews_to_close.txt ]]; then
            echo "Closing peer reviews"
            while read -r issue; do
              ISSUE_NUM=$(echo "$issue")

              echo "üìù Closing issue #$ISSUE_NUM"

              gh issue close "$ISSUE_NUM" --repo "$REPO" --comment "‚úÖ Peer review finished because author issue closed"

            done < peer_reviews_to_close.txt
          else
            echo "No issues to close."
          fi