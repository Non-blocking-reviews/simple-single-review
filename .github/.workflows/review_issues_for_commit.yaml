name: Trunktopus_Create_Code_Review_Issues

# on:
#   workflow_dispatch: # Allows manual triggering
on:
  push:
    branches:
      - main

concurrency:
  group: create-reviews-for-commits
  cancel-in-progress: false

jobs:
  create-code-review-issues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.TRUNKTOPUS_APP_ID }}
          private-key: ${{ secrets.TRUNKTOPUS_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commits
        run: |
          git log ${{ github.event.before }}..${{ github.sha }} --pretty=format:"%H %s" > commits.txt

      - name: Create main and sub-issues
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          set -e

          PROJECT_ID="PVT_1234567890"  # Replace with your Project V2 node ID - retrieve with "project-ids"-workflow.
          REVIEWERS=("username1" "username2")  # Add more if needed
          REPO="${{ github.repository }}"
          REPO_ID=$(gh api repos/$REPO --jq '.node_id')
          REPO_URL="https://github.com/$REPO"

          # Ensure labels exist
          gh label create "peer-review" --color "#1D76DB" --description "Peer review of commit" || true
          gh label create "author-issue" --color "#5319E7" --description "Author issue for commit" || true

          mapfile -t COMMITS < <(awk '{print $1}' commits.txt)
          declare -A REVIEWER_IDS

          # Cache reviewer node IDs
          echo "Fetching reviewer ids"
          for reviewer in "${REVIEWERS[@]}"; do
            REVIEWER_IDS[$reviewer]=$(gh api users/$reviewer --jq '.node_id')
          done
          echo "Iterating commits"
          for COMMIT in "${COMMITS[@]}"; do
            SHORT_SHA=${COMMIT:0:7}
            echo "Creating for commit $SHORT_SHA"

            FIRST_LINE=$(git show -s --format=%s "$COMMIT")
            MAIN_TITLE="Commit: $FIRST_LINE ($SHORT_SHA)"
            MAIN_BODY="Please review the changes made in [\`$COMMIT\`]($REPO_URL/commit/$COMMIT)"

            AUTHOR_LOGIN=$(gh api repos/$REPO/commits/$COMMIT --jq '.author.login')
            echo "Author Login $AUTHOR_LOGIN"
            
            AUTHOR_NODE_ID=$(gh api users/$AUTHOR_LOGIN --jq '.node_id')
            
            echo "author id $AUTHOR_NODE_ID"

            MAIN_ISSUE_JSON=$(gh api graphql -F query='
              mutation($title:String!, $body:String!, $repoId:ID!, $assigneeIds:[ID!]) {
                createIssue(input: {
                  title: $title,
                  body: $body,
                  repositoryId: $repoId,
                  assigneeIds: $assigneeIds
                }) {
                  issue {
                    id
                    number
                    url
                  }
                }
              }' \
              -F title="$MAIN_TITLE" \
              -F body="$MAIN_BODY" \
              -F repoId="$REPO_ID" \
              -F assigneeIds="$AUTHOR_NODE_ID")

            echo "Issue created id"
            MAIN_ISSUE_ID=$(echo "$MAIN_ISSUE_JSON" | jq -r '.data.createIssue.issue.id')
            MAIN_ISSUE_NUM=$(echo "$MAIN_ISSUE_JSON" | jq -r '.data.createIssue.issue.number')
            MAIN_ISSUE_URL=$(echo "$MAIN_ISSUE_JSON" | jq -r '.data.createIssue.issue.url')

            echo "Issue created $MAIN_ISSUE_URL"

            gh issue edit "$MAIN_ISSUE_NUM" --add-label "peer-review,author-issue"

            echo "✅ Main issue #$MAIN_ISSUE_NUM created"

            CHECKLIST_ITEMS=()

            REVIEWERS_TO_ASSIGN=()
            for reviewer in "${REVIEWERS[@]}"; do
              if [[ "$reviewer" == "$AUTHOR_LOGIN" ]]; then
                echo "⚠️ Skipping '$reviewer' (is author)"
                continue
              fi
              REVIEWERS_TO_ASSIGN+=("${REVIEWER_IDS[$reviewer]}")
            done

            ASSIGNEE_ARGS=()
            for id in "${REVIEWERS_TO_ASSIGN[@]}"; do
              ASSIGNEE_ARGS+=(-F assigneeIds[]="$id")
            done

            # Get the diff and check if it’s short enough
            COMMIT_DIFF=$(git show --no-color --stat --patch --no-prefix "$COMMIT" | tail -n +2)
            DIFF_LINE_COUNT=$(echo "$COMMIT_DIFF" | wc -l)

            echo "Lines: $DIFF_LINE_COUNT"

            if [ "$DIFF_LINE_COUNT" -le 60 ]; then
              DIFF_SECTION=$(printf "\n\n🧾 Small change: %s lines \n\n\`\`\`diff\n%s\n\`\`\`\n</details>" "$DIFF_LINE_COUNT" "$COMMIT_DIFF")
            else
              DIFF_SECTION=""
            fi

            SUB_TITLE="Review: $FIRST_LINE ($SHORT_SHA)"
            SUB_BODY=$(printf "Please review the changes made in [\`%s\`](%s/commit/%s)\n\nLinked to main issue: #%s\n%s" \
              "$COMMIT" "$REPO_URL" "$COMMIT" "$MAIN_ISSUE_NUM" "$DIFF_SECTION")

            SUB_ISSUE_JSON=$(gh api graphql -f query='
              mutation($title:String!, $body:String!, $repoId:ID!, $assigneeIds:[ID!]) {
                createIssue(input: {
                  title: $title,
                  body: $body,
                  repositoryId: $repoId,
                  assigneeIds: $assigneeIds
                }) {
                  issue {
                    id
                    number
                    url
                  }
                }
              }' \
              -F title="$SUB_TITLE" \
              -F body="$SUB_BODY" \
              -F repoId="$REPO_ID" \
              "${ASSIGNEE_ARGS[@]}")

            echo "Peer review created: {$REVIEWER_ID}"
            sleep 1

            SUB_ISSUE_ID=$(echo "$SUB_ISSUE_JSON" | jq -r '.data.createIssue.issue.id')
            SUB_ISSUE_NUM=$(echo "$SUB_ISSUE_JSON" | jq -r '.data.createIssue.issue.number')
            SUB_ISSUE_URL=$(echo "$SUB_ISSUE_JSON" | jq -r '.data.createIssue.issue.url')
            gh issue edit "$SUB_ISSUE_NUM" --add-label "peer-review"

            echo "  ↳ Sub-issue #$SUB_ISSUE_NUM for $reviewer created"

            # 2. Add sub-issue to project
            gh api graphql -f query='
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }' -F projectId="$PROJECT_ID" -F contentId="$SUB_ISSUE_ID"

            CHECKLIST_ITEMS+=("- [ ] [Sub-task for reviewers](https://github.com/$REPO/issues/$SUB_ISSUE_NUM)")

            gh issue comment "$MAIN_ISSUE_NUM" --body "Sub-issue assigned to $reviewer: $SUB_ISSUE_URL"

            CHECKLIST=$(printf "%s\n" "${CHECKLIST_ITEMS[@]}")
            NEW_BODY=$(printf "%s\n\n### Review Checklist\n%s" "$MAIN_BODY" "$CHECKLIST")
            gh api repos/$REPO/issues/$MAIN_ISSUE_NUM -X PATCH -F body="$NEW_BODY"

            gh api graphql -f query='
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }' -F projectId="$PROJECT_ID" -F contentId="$MAIN_ISSUE_ID"
          done
